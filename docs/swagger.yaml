basePath: /api/v1/user
definitions:
  lib.BaseResponse:
    properties:
      data: {}
      error: {}
      message:
        type: string
      status:
        type: integer
    type: object
  lib.Page:
    properties:
      first:
        description: indicate first value
        example: true
        type: boolean
      items:
        type: object
      last:
        description: indicate last value
        example: false
        type: boolean
      max_page:
        description: maximum pages for current schema
        example: 9
        type: integer
      page:
        description: current page, start from zero
        example: 0
        type: integer
      size:
        description: size per page, default `10`
        example: 10
        type: integer
      total:
        description: total data without filters
        example: 100
        type: integer
      total_pages:
        description: total pages
        example: 10
        type: integer
      visible:
        description: current length
        example: 10
        type: integer
    type: object
  lib.Response:
    properties:
      message:
        description: response message
        type: string
      status:
        description: http status
        type: integer
    type: object
  model.Department:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      department_code:
        type: string
      department_name:
        type: string
      gm_num:
        type: integer
      id:
        type: integer
      is_deleted:
        type: boolean
      is_sub:
        type: integer
      job_title:
        items:
          $ref: '#/definitions/model.JobTitle'
        type: array
      updated_at:
        type: string
    type: object
  model.DepartmentRequest:
    properties:
      department_code:
        type: string
      department_name:
        type: string
      gm_num:
        type: integer
      is_sub:
        type: integer
    type: object
  model.JobTitle:
    properties:
      created_at:
        type: string
      daily_level:
        type: integer
      deleted_at:
        type: string
      department_id:
        type: integer
      gm_num:
        type: integer
      id:
        type: integer
      is_daily:
        type: integer
      is_deleted:
        type: boolean
      name:
        type: string
      role:
        type: integer
      sub_dept:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:9090
info:
  contact:
    email: developer@mail.com
    name: Developer
  description: API Documentation
  termsOfService: https://dospecs.monstercode.net/en/guide/tnc.html
  title: User Services
  version: 1.0.0
paths:
  /:
    get:
      consumes:
      - application/json
      description: show basic response
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/lib.Response'
      summary: show basic response
      tags:
      - API
  /department:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of Department from the database. You
        can specify the page number, number of records per page, sorting order, and
        apply custom filters to refine the results. </br>By default, the first page
        is returned with 10 records per page. You can also specify which fields to
        include in the response for better performance.
      parameters:
      - description: Page number starting from zero. Default is 0.
        in: query
        name: page
        type: integer
      - description: Number of records per page. Default is 10.
        in: query
        name: size
        type: integer
      - description: Sort by a specific field. Prefix with a dash (`-`) for descending
          order, e.g., `-name`.
        in: query
        name: sort
        type: string
      - description: Comma-separated list of specific fields to include in the response.
        in: query
        name: fields
        type: string
      - description: Custom filters for querying data. See [filter format documentation](https://github.com/morkid/paginate#filter-format)
          for more details.
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of Department
          schema:
            allOf:
            - $ref: '#/definitions/lib.BaseResponse'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/lib.Page'
                  - properties:
                      items:
                        items:
                          $ref: '#/definitions/model.Department'
                        type: array
                    type: object
              type: object
        "400":
          description: 'Bad Request: Invalid parameters provided.'
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: 'Not Found: No Department matched the query.'
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: 'Internal Server Error: Unexpected error occurred.'
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: Unexpected error response.
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - TokenKey: []
      summary: List of Department (Department)
      tags:
      - Department (Department)
    post:
      consumes:
      - application/json
      description: Create a new Department by providing the required data. If the
        Department is successfully created, a `201` response with the created Department
        data will be returned. In case of errors, appropriate error messages will
        be returned, such as invalid input data or conflicts.
      parameters:
      - description: Department data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.DepartmentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created Department data
          schema:
            $ref: '#/definitions/model.Department'
        "400":
          description: 'Bad Request: Invalid parameters provided.'
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: 'Conflict: The Department is in use or cannot be created due
            to a conflict.'
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: 'Internal Server Error: Unexpected error occurred.'
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: Unexpected error response.
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - TokenKey: []
      summary: Create new Department (Department)
      tags:
      - Department (Department)
  /department/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an Department record based on its unique ID. If the Department
        is found, it will be removed from the database. </br>If the Department does
        not exist, an error response will be returned. If there is a conflict preventing
        deletion, an appropriate error message will be provided.
      parameters:
      - description: Department ID - The unique identifier of the Department to be
          deleted
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful deletion of Department
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: 'Bad Request: Invalid parameters provided.'
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: 'Not Found: No Department found with the provided ID.'
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: 'Conflict: The Department is in use or cannot be deleted due
            to a conflict.'
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: 'Internal Server Error: Unexpected error occurred.'
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: Unexpected error response.
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - TokenKey: []
      summary: Delete Department by id (Department)
      tags:
      - Department (Department)
    get:
      consumes:
      - application/json
      description: Retrieve detailed information of a specific Department using its
        unique ID. If the Department with the given ID is found, the Department's
        data is returned. </br>If no Department is found for the provided ID, a '404'
        error response is returned indicating the Department was not found.
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Department data
          schema:
            $ref: '#/definitions/model.Department'
        "400":
          description: 'Bad Request: Invalid parameters provided.'
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: 'Not Found: No Department matched the query.'
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: 'Internal Server Error: Unexpected error occurred.'
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: Unexpected error response.
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - TokenKey: []
      summary: Get an Department by ID (Department))
      tags:
      - Department (Department)
    put:
      consumes:
      - application/json
      description: Update an existing Department using its unique ID. Provide the
        new data for the Department, and if the update is successful, the updated
        Department's data will be returned. </br>If the Department does not exist
        or there is a conflict during the update, appropriate error responses will
        be provided.
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: string
      - description: Department data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.DepartmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated Department data
          schema:
            $ref: '#/definitions/model.Department'
        "400":
          description: 'Bad Request: Invalid parameters provided.'
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: 'Not Found: No Department matched the provided ID.'
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: 'Conflict: The Department is in use or cannot be updated due
            to a conflict.'
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: 'Internal Server Error: Unexpected error occurred.'
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: Unexpected error response.
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - TokenKey: []
      summary: Update Department by id (Department)
      tags:
      - Department (Department)
  /info.json:
    get:
      consumes:
      - application/json
      description: show info response
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/lib.Response'
      summary: show info response
      tags:
      - API
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  TokenKey:
    in: header
    name: x-Token
    type: apiKey
swagger: "2.0"
